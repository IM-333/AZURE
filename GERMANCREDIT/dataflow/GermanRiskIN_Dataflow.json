{
	"name": "GermanRiskIN_Dataflow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "GermanRisk",
						"type": "DatasetReference"
					},
					"name": "DATAIN"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "GermanRiskOut",
						"type": "DatasetReference"
					},
					"name": "Out"
				}
			],
			"transformations": [
				{
					"name": "statusandrisk"
				},
				{
					"name": "normalized"
				},
				{
					"name": "savings"
				},
				{
					"name": "sex"
				},
				{
					"name": "housing"
				},
				{
					"name": "job"
				},
				{
					"name": "status"
				}
			],
			"scriptLines": [
				"source(output(",
				"          existingchecking as string,",
				"          duration as string,",
				"          creditamount as string,",
				"          savings as string,",
				"          employmentsince as string,",
				"          status_sex as string,",
				"          age as string,",
				"          housing as string,",
				"          existingcredits as string,",
				"          job as string,",
				"          dependents as string,",
				"          risk as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> DATAIN",
				"DATAIN derive(marital_status = split(status_sex, ':')[1],",
				"          sex = split(status_sex, ':')[2],",
				"          risk = iif(\r",
				"    equals(lower(trim(risk)), \"high risk\"),\r",
				"    1,\r",
				"    0\r",
				")) ~> statusandrisk",
				"statusandrisk derive(normalized_savings = trim(lower(savings)),",
				"          normalized_job = trim(lower(replace(job, '/', '_'))),",
				"          normalized_status = trim(lower(replace(replace(replace(marital_status, ' ', '_'), '/', '_or_'), '-', '_')))) ~> normalized",
				"normalized derive(savings_little = iif(equals(normalized_savings, \"little\"), 1, 0),",
				"          savings_moderate = iif(equals(normalized_savings, \"moderate\"), 1, 0),",
				"          savings_high = iif(equals(normalized_savings, \"high\"), 1, 0),",
				"          savings_very_high = iif(equals(normalized_savings, \"very high\"), 1, 0)) ~> savings",
				"savings derive(male = iif(equals(sex, \"male\"), 1, 0)) ~> sex",
				"sex derive(housing_own = iif(equals(housing, \"own\"), 1, 0),",
				"          housing_rent = iif(equals(housing, \"rent\"), 1, 0)) ~> housing",
				"housing derive(job_skilled_employee_official = iif(equals(normalized_job, \"skilled employee_official\"),      1,      0 ),",
				"          job_unskilled = iif(     equals(normalized_job, \"unskilled\"),      1,      0 ),",
				"          job_management_highly_skilled = iif(     equals(normalized_job, \"management_highly_skilled\"),      1,      0 )) ~> job",
				"job derive(status_div_or_sep = iif(\r",
				"    equals(normalized_status, \"divorced_or_separated\"), \r",
				"    1, \r",
				"    0\r",
				")\r",
				",",
				"          status_div_sep_married = iif(     equals(normalized_status, \"divorced_or_separated_or_married\"),      1,      0 ),",
				"          status_married_widowed = iif(     equals(normalized_status, \"married_or_widowed\"),      1,      0 )) ~> status",
				"status sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     recreate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> Out"
			]
		}
	}
}